package main;
import java.util.ArrayList;

public class Farm {
	private String name;
	private String type;
	private Farmer farmer;
	private ArrayList<Crop> crops = new ArrayList<Crop>();
	private ArrayList<Animal> animals = new ArrayList<Animal>();
	private ArrayList<Item> inventory = new ArrayList<Item>();
	private double balance;
	private int cropGrowthBonus;
	private double animalHappinessFactor;
	private double animalHealthFactor;
	private double cropYieldFactor;

	/**
	 * Farm constructor
	 * @param name - name of the farm
	 * @param type - what type of farm, either friendly, fast, fertile, or rich
	 * @param farmer - farmer that owns and operates the farm
	 */
	public Farm(String name, String type, Farmer farmer) {
		this.name = name;
		this.type = type;
		this.farmer = farmer;
		setType(type);
	}
	
	/**
	 * 
	 * @return name of the farm
	 */
	public String getName() {
		return name;
	}
	
	/**
	 * 
	 * @param name - name of the farm to set
	 */
	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * 
	 * @return type of the farm, either friendly, fast, fertile, or rich
	 */
	public String getType() {
		return type;
	}
	
	/**
	 * Sets the type of the farm, and uses the type to set the balance and bonuses of that type of farm
	 * @param type - type of the farm to set
	 */
	public void setType(String type) {
		this.type = type;
		switch(this.type) {
		case "friendly":
			balance = 10000.00;
			cropGrowthBonus = 1;
			animalHappinessFactor = 1.25;
			animalHealthFactor = 1;
			cropYieldFactor = 1.0;
			break;
		case "fast":
			balance = 10000.00;
			cropGrowthBonus = 1;
			animalHappinessFactor = 1.0;
			animalHealthFactor = 1;
			cropYieldFactor = 1.0;
			break;
		case "fertile":
			balance = 10000.00;
			cropGrowthBonus = 1;
			animalHappinessFactor = 1.0;
			animalHealthFactor = 1;
			cropYieldFactor = 1.25;
			break;
		case "rich":
			balance = 15000.00;
			cropGrowthBonus = 1;
			animalHappinessFactor = 1.0;
			animalHealthFactor = 1;
			cropYieldFactor = 1.0;
			break;
		default:
			balance = 12000.00;
			cropGrowthBonus = 1;
			animalHappinessFactor = 1.0;
			animalHealthFactor = 1;
			cropYieldFactor = 1.0;
			break;
		}
	}
	
	/**
	 * 
	 * @return the farmer that owns/operates the farm
	 */
	public Farmer getFarmer() {
		return farmer;
	}
	
	/**
	 * 
	 * @param farmer - farmer to set
	 */
	public void setFarmer(Farmer farmer) {
		this.farmer = farmer;
	}

	/**
	 * 
	 * @return list of the crops the farm has planted
	 */
	public ArrayList<Crop> getCrops() {
		return crops;
	}
	
	/**
	 * 
	 * @return list of the animals the farm owns
	 */
	public ArrayList<Animal> getAnimals() {
		return animals;
	}
	
	/**
	 * 
	 * @return list of the items the farm owns
	 */
	public ArrayList<Item> getInventory() {
		return inventory;
	}
	
	/**
	 * 
	 * @return the balance of the farm, in dollars
	 */
	public double getBalance() {
		return balance;
	}
	
	/**
	 * 
	 * @param capital - balance of the farm to set, in dollars
	 */
	public void setBalance(double capital) {
		balance = capital;
	}
	
	/**
	 * Change the balance of the farm
	 * @param value - value to update the balance by, in dollars
	 */
	public void updateBalance(double value) {
		balance += value;
	}
	
	/**
	 * 
	 * @return crop growth bonus of the farm
	 */
	public int getCropGrowthBonus() {
		return cropGrowthBonus;
	}
	
	/**
	 * 
	 * @param bonus - crop growth bonus to set
	 */
	public void setCropGrowthBonus(int bonus) {
		cropGrowthBonus = bonus;
	}
	
	/**
	 * 
	 * @return animal happiness factor of the farm
	 */
	public double getAnimalHappinessFactor() {
		return animalHappinessFactor;
	}

	/**
	 * 
	 * @return animal health factor of the farm
	 */
	public double getAnimalHealthFactor() {
		return animalHealthFactor;
	}
	
	/**
	 * 
	 * @return crop yield factor of the farm
	 */
	public double getCropYieldFactor() {
		return cropYieldFactor;
	}
	
	/**
	 * 
	 * @param factor - crop yield factor of the farm to set
	 */
	public void setCropYieldFactor(double factor) {
		cropYieldFactor = factor;
	}
	
	/**
	 * Add a crop to the farm
	 * @param c - crop to add
	 * @param currentDay - day the crop is purchased and planted
	 */
	public void addCrop(Crop c, int currentDay) {
		c.setDayPlanted(currentDay);
		crops.add(c);
	}
	
	/**
	 * Add an animal to the farm
	 * @param animal - animal to add
	 */
	public void addAnimal(Animal animal) {
		animals.add(animal);
	}
	
	/**
	 * Feed the animals in the farm, increases their health
	 * @param food - food used to feed the animal
	 */
	public void feedAnimals(FoodItem food) {
		for(int i = 0; i < animals.size(); i++) {
			animals.get(i).updateHealth(food.getHealthPoints());
		}
	}
	
	/**
	 * Play with the animals in the farm, increases their happiness
	 */
	public void playAnimals() {
		for(int i = 0; i < animals.size(); i++) {
			animals.get(i).updateHappiness(this.animalHappinessFactor); //TODO decide how much to raise animal happiness by ---> by the happiness factor?
		}
	}
	
	/**
	 * Tend to the farm's crops, decreasing their days until mature
	 * @param species - species to tend to
	 */
	public void tendCrop(String species) {
		for(int i = 0; i < crops.size(); i++) {
			if(crops.get(i).getSpecies().equals(species)) {
				crops.get(i).reduceDaysUntilMature(1); //Water, no item
			}
		}
	}
	
	/**
	 * Tend to the farm's crops, decreasing their days until mature
	 * @param targetSpecies - species to tend to
	 */
	public void waterCrop(String targetSpecies) {
		int cropQuantity = this.crops.size();
		for (int j = 0; j < cropQuantity; j++) {
			if (crops.get(j).getSpecies() == targetSpecies) {
				//water the crop
				crops.get(j).setDaysUntilMature(crops.get(j).getDaysUntilMature() - 1, 0);
			}
		}
	}
	
	/**
	 * Tend to the farm's crops, decreasing their days until mature
	 * @param species - species to tend to
	 * @param cropItem - item to use to decrease their days until mature
	 */
	public void tendCrop(String species, CropItem cropItem) {
		for(int i = 0; i < crops.size(); i++) {
			if(crops.get(i).getSpecies().equals(species)) {
				crops.get(i).reduceDaysUntilMature(cropItem.getGrowthEnhancement()); //with item
			}
		}
	}
	
	/**
	 * Harvest the crop of the farm, removing all mature crops and giving the farm money when doing so
	 */
	public void harvestCrop() {
		for(int i = 0; i < crops.size(); i++) {
			if(crops.get(i).getDaysUntilMature() == 0) {
				this.balance += crops.get(i).getSellingPrice()*cropYieldFactor;
				crops.remove(i);
				//i--;
			}
		}
	}
	
	/**
	 * Make the farm give more crops and increase the animal happiness factor
	 */
	public void tendFarm() {
		cropYieldFactor += 0.1;
		animalHappinessFactor += 0.1;
	}
	
	/**
	 * Add item to farm
	 * @param item - item to add
	 */
	public void addItem(Item item) {
		inventory.add(item);
	}
	
	/**
	 * Figure out if the farm owns a crop
	 * @param species - crop to see if farm owns
	 * @return - true if the farm owns the crop, false if not
	 */
	public boolean ownsCrop(String species) {
		boolean exists = false;
		for (int j = 0; j < crops.size(); j++) {
			if (crops.get(j).getSpecies() == species) {
				exists = true;
				break;
			}
		}
		return exists;
	}
	
	/**
	 * Figure out if crops are ready to harvest
	 * @return - true if crops are ready to harvest, false otherwise
	 */
	public boolean cropsReady() {
		boolean cropsReady = false;
		for(int i = 0; i < crops.size(); i++) {
			if(crops.get(i).getDaysUntilMature() == 0) {
				cropsReady = true;
			}
		}
		return cropsReady;
	}
	
	/**
	 * Get an item from the farm
	 * @param id - id of the item to get from the farm
	 * @return - item in the farm, null if it doesn't exist in the farm
	 */
	public Item fetchItem(int id) {
		
		for (int j = 0; j < inventory.size(); j++) {
			if (inventory.get(j).getId() == id) {
				return inventory.get(j);
			}
		}
		return null;
	}
	
	public void removeItem(int id) {
		for(int i = 0; i < inventory.size(); i++) {
			if(inventory.get(i).getId() == id) {
				inventory.remove(i);
				System.out.println("ITEM REMOVED");
				break;
			}
		}
	}
	
}
