package test;

import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import main.Animal;
import main.Crop;
import main.CropItem;
import main.Farm;
import main.Farmer;
import main.FoodItem;
import main.Item;

class FarmTest {
	private Farm testFarm;
	
	@BeforeEach
	public void init() {
		testFarm = new Farm("Billy Bob's Friendly Farm", "friendly", new Farmer("Billy Bob", 52));
		testFarm.addCrop(new Crop("banana", 2000, 2, 4, 5, 0), 0);
		testFarm.addCrop(new Crop("corn", 250, 1, 1, 5, 0), 0);
		testFarm.addCrop(new Crop("kiwi", 3000, 1, 2, 5, 0), 0);
		testFarm.addCrop(new Crop("kumera", 100, 150, 1, 5, 0), 0);
		testFarm.addCrop(new Crop("mango", 5000, 10000, 5, 5, 0), 0);
		testFarm.addCrop(new Crop("spinach", 450, 800, 1, 5, 0), 0);
		
		ArrayList <Animal> animalSpecies = new ArrayList <Animal>();
		animalSpecies.add(new Animal("llama", 250, 100, 9, 10));
		animalSpecies.add(new Animal("koala", 5000, 300, 6, 1));
		animalSpecies.add(new Animal("panda", 9999, 5000, 1, 1));
		
		ArrayList <Item> foodItems = new ArrayList <Item>();
		foodItems.add(new FoodItem("sugar cane", 2, 2500));
		foodItems.add(new FoodItem("eucalyptus leaves", 4, 3000));
		foodItems.add(new FoodItem("brocooli", 1, 1500));
		
		ArrayList <Item> cropItems = new ArrayList <Item>();
		cropItems.add(new CropItem("fertilizer", 2000, 1));
		cropItems.add(new CropItem("pestiside", 4500, 3));
		cropItems.add(new CropItem("unicorn dung", 8000, 5));
	}
	
	@Test
	public void testSetType() {
		testFarm.setType("friendly");
		assertEquals("friendly", testFarm.getType());
		assertEquals(10000, testFarm.getBalance());
		assertEquals(10000, testFarm.getCapital());
		assertEquals(0, testFarm.getCropGrowthBonus());
		assertEquals(1.25, testFarm.getAnimalHappinessFactor());
		assertEquals(1.25, testFarm.getAnimalHealthFactor());
		assertEquals(1, testFarm.getCropYieldFactor());
		testFarm.setType("fast");
		assertEquals("fast", testFarm.getType());
		assertEquals(10000, testFarm.getBalance());
		assertEquals(10000, testFarm.getCapital());
		assertEquals(1, testFarm.getCropGrowthBonus());
		assertEquals(1, testFarm.getAnimalHappinessFactor());
		assertEquals(1, testFarm.getAnimalHealthFactor());
		assertEquals(1, testFarm.getCropYieldFactor());
		testFarm.setType("fertile");
		assertEquals("fertile", testFarm.getType());
		assertEquals(10000, testFarm.getBalance());
		assertEquals(10000, testFarm.getCapital());
		assertEquals(0, testFarm.getCropGrowthBonus());
		assertEquals(1, testFarm.getAnimalHappinessFactor());
		assertEquals(1, testFarm.getAnimalHealthFactor());
		assertEquals(1.25, testFarm.getCropYieldFactor());
		testFarm.setType("rich");
		assertEquals("rich", testFarm.getType());
		assertEquals(15000, testFarm.getBalance());
		assertEquals(15000, testFarm.getCapital());
		assertEquals(0, testFarm.getCropGrowthBonus());
		assertEquals(1, testFarm.getAnimalHappinessFactor());
		assertEquals(1, testFarm.getAnimalHealthFactor());
		assertEquals(1, testFarm.getCropYieldFactor());
	}
	
	@Test
	public void testFeedAnimals() {
		
	}
}
